define(["require","exports"],function(n,t){t.ctx=new MyApp.DataService.Context({name:"oData",oDataServiceHost:"../_vti_bin/listdata.svc"}),t.currentUser,$.ajax("../_api/web/CurrentUser",{type:"GET",headers:{Accept:"application/json;odata=verbose"},contentType:"application/json",success:function(n){t.currentUser=n.d},error:function(){console.log("Error"+arguments)}}),t.examples=[],t.examples.push({Title:"Create a new project item",Description:"Entity.context.addEventListener() provides an easy way of logging. \nSimply hook that into SP.UI.Notify.addNotification() to provide SharePoint like notification",Code:function(){var n=new t.ctx.Projects.elementType({Title:"Project one"});t.ctx.Projects.add(n),t.ctx.saveChanges()}}),t.examples.push({Title:" Create a another project item by using an object literal",Description:"This time saveChanges() uses explicit success and error callbacks",Code:function(){t.ctx.Projects.add({Title:"Project two"}),t.ctx.saveChanges({success:function(){console.log("Item created!")},error:function(){console.log("Error: ",arguments[0])}})}}),t.examples.push({Title:" Create a another project item",Description:"saveChanges() provides a promise Interface as well, so we can use .then() and .fail() instead of success and error callbacks. My personal favorite ;-)",Code:function(){t.ctx.Projects.add({Title:"Project three"}),t.ctx.saveChanges().then(function(){console.log("Item created")}).fail(function(){console.log("Error: ",arguments[0])})}}),t.examples.push({Title:"Ever had the need to create more than one project in a single network operation?",Description:"addMany() and object literals are your friends. Watch how that translates into a OData's $batch method that sgoes over the wire.",Code:function(){for(var i=[],n=4,r=14;n<r;n++)i.push(new MyApp.DataService.ProjectsItem({Title:"Project "+n}));$.each(i,function(n,i){t.ctx.Projects.add(i)}),t.ctx.saveChanges().then(function(){console.log("Mulitple items created!"),console.dir(i)}).fail(function(){console.log("Error: ",arguments[0])})}}),t.examples.push({Title:"Run a project through its whole life cyle",Description:"Create, Update, Delete in a hurry! Individual notifications for each event",Code:function(){var n=new t.ctx.Projects.elementType({Title:"Unfortunately I won't be here for very long"});t.ctx.Projects.add(n),t.ctx.saveChanges().then(function(){return console.log("Going to attach"),t.ctx.attach(n),n.Title="Told you... they are already updating me. Guess what comes next?",console.log("Going to save"),t.ctx.saveChanges()}).then(function(){return console.log("Going to remove"),t.ctx.Projects.remove(n),t.ctx.saveChanges()}).then(function(){console.log("project life cycle completed")}).fail(function(){console.log("Error: ",arguments[0])})}}),t.examples.push({Title:"Create a new Time Tracking item",Description:"TimeTracking list has a Lookup field to the project list. Here we a going to create a new TimeTracking item AND a new project in a single call.",Code:function(){t.ctx.TimeTrackingList.add({Title:"Test entry",Date:new Date,DurationHours:4,ProjectTask:new t.ctx.Projects.elementType({Title:"Project with related time entry"}),EmployeeId:t.currentUser.Id}),t.ctx.saveChanges().then(function(){console.log("Way too easy, isn't it?")}).fail(function(){console.log("Error: ",arguments[0])})}})})