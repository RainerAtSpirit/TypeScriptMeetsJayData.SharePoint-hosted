///<reference path="../../Scripts/jaydata.d.ts" />
/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                     oData V1.1 TypeScript                               /////////
//////////////////////////////////////////////////////////////////////////////////////*/


module MyApp.DataService {
  class AttachmentsItem extends $data.Entity {
    constructor ();
    constructor (initData: { EntitySet?: string; ItemId?: number; Name?: string; });
    EntitySet: string;
    ItemId: number;
    Name: string;
    
  }

  export interface AttachmentsItemQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.AttachmentsItem) => bool): MyApp.DataService.AttachmentsItemQueryable;
    filter(predicate:(it: MyApp.DataService.AttachmentsItem) => bool, thisArg: any): MyApp.DataService.AttachmentsItemQueryable;

    map(projection: (it: MyApp.DataService.AttachmentsItem) => any): MyApp.DataService.AttachmentsItemQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.AttachmentsItem) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.AttachmentsItem[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.AttachmentsItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.AttachmentsItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.AttachmentsItem) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.AttachmentsItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.AttachmentsItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.AttachmentsItemQueryable;
    skip(amout: number): MyApp.DataService.AttachmentsItemQueryable;

    order(selector: string): MyApp.DataService.AttachmentsItemQueryable;
    orderBy(predicate: (it: MyApp.DataService.AttachmentsItem) => any): MyApp.DataService.AttachmentsItemQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.AttachmentsItem) => any): MyApp.DataService.AttachmentsItemQueryable;
    
    first(predicate: (it: MyApp.DataService.AttachmentsItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.AttachmentsItem) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.AttachmentsItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.AttachmentsItem[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.AttachmentsItemQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface AttachmentsItemSet extends AttachmentsItemQueryable {
    add(initData: { EntitySet?: string; ItemId?: number; Name?: string; }): MyApp.DataService.AttachmentsItem;
    add(item: MyApp.DataService.AttachmentsItem): MyApp.DataService.AttachmentsItem;

    attach(item: MyApp.DataService.AttachmentsItem): void;
    attach(item: { EntitySet: string; ItemId: number; Name: string; }): void;
    attachOrGet(item: MyApp.DataService.AttachmentsItem): MyApp.DataService.AttachmentsItem;
    attachOrGet(item: { EntitySet: string; ItemId: number; Name: string; }): MyApp.DataService.AttachmentsItem;

    detach(item: MyApp.DataService.AttachmentsItem): void;
    detach(item: { EntitySet: string; ItemId: number; Name: string; }): void;

    remove(item: MyApp.DataService.AttachmentsItem): void;
    remove(item: { EntitySet: string; ItemId: number; Name: string; }): void;
    
    elementType: new (initData: { EntitySet?: string; ItemId?: number; Name?: string; }) => MyApp.DataService.AttachmentsItem;
  }

  class ComposedLooksItem extends $data.Entity {
    constructor ();
    constructor (initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Title?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; Name?: string; MasterPageURL?: string; ThemeURL?: string; ImageURL?: string; FontSchemeURL?: string; DisplayOrder?: number; });
    Id: number;
    ContentTypeID: string;
    ContentType: string;
    Title: string;
    Modified: Date;
    Created: Date;
    CreatedBy: MyApp.DataService.UserInformationListItem;
    CreatedById: number;
    ModifiedBy: MyApp.DataService.UserInformationListItem;
    ModifiedById: number;
    Owshiddenversion: number;
    Version: string;
    Attachments: MyApp.DataService.AttachmentsItem[];
    Path: string;
    Name: string;
    MasterPageURL: string;
    ThemeURL: string;
    ImageURL: string;
    FontSchemeURL: string;
    DisplayOrder: number;
    
  }

  export interface ComposedLooksItemQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.ComposedLooksItem) => bool): MyApp.DataService.ComposedLooksItemQueryable;
    filter(predicate:(it: MyApp.DataService.ComposedLooksItem) => bool, thisArg: any): MyApp.DataService.ComposedLooksItemQueryable;

    map(projection: (it: MyApp.DataService.ComposedLooksItem) => any): MyApp.DataService.ComposedLooksItemQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.ComposedLooksItem) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.ComposedLooksItem[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.ComposedLooksItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.ComposedLooksItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.ComposedLooksItem) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.ComposedLooksItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.ComposedLooksItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.ComposedLooksItemQueryable;
    skip(amout: number): MyApp.DataService.ComposedLooksItemQueryable;

    order(selector: string): MyApp.DataService.ComposedLooksItemQueryable;
    orderBy(predicate: (it: MyApp.DataService.ComposedLooksItem) => any): MyApp.DataService.ComposedLooksItemQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.ComposedLooksItem) => any): MyApp.DataService.ComposedLooksItemQueryable;
    
    first(predicate: (it: MyApp.DataService.ComposedLooksItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.ComposedLooksItem) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.ComposedLooksItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.ComposedLooksItem[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.ComposedLooksItemQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ComposedLooksItemSet extends ComposedLooksItemQueryable {
    add(initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Title?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; Name?: string; MasterPageURL?: string; ThemeURL?: string; ImageURL?: string; FontSchemeURL?: string; DisplayOrder?: number; }): MyApp.DataService.ComposedLooksItem;
    add(item: MyApp.DataService.ComposedLooksItem): MyApp.DataService.ComposedLooksItem;

    attach(item: MyApp.DataService.ComposedLooksItem): void;
    attach(item: { Id: number; }): void;
    attachOrGet(item: MyApp.DataService.ComposedLooksItem): MyApp.DataService.ComposedLooksItem;
    attachOrGet(item: { Id: number; }): MyApp.DataService.ComposedLooksItem;

    detach(item: MyApp.DataService.ComposedLooksItem): void;
    detach(item: { Id: number; }): void;

    remove(item: MyApp.DataService.ComposedLooksItem): void;
    remove(item: { Id: number; }): void;
    
    elementType: new (initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Title?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; Name?: string; MasterPageURL?: string; ThemeURL?: string; ImageURL?: string; FontSchemeURL?: string; DisplayOrder?: number; }) => MyApp.DataService.ComposedLooksItem;
  }

  class MasterPageGalleryItem extends $data.Entity {
    constructor ();
    constructor (initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; Modified?: Date; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; CopySource?: string; ApprovalStatus?: string; Path?: string; CheckedOutTo?: MyApp.DataService.UserInformationListItem; CheckedOutToId?: number; Name?: string; VirusStatus?: string; IsCurrentVersion?: bool; Owshiddenversion?: number; Version?: string; Description?: string; CompatibleUIVersionS?: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue[]; DefaultCSSFile?: string; Hidden?: bool; TargetControlType?: MyApp.DataService.MasterPageGalleryTargetControlTypeValue; TargetControlTypeValue?: string; Icon?: string; Standalone?: MyApp.DataService.MasterPageGalleryStandaloneValue; StandaloneValue?: string; TargetScope?: string; TargetListTemplateID?: string; });
    Id: number;
    ContentTypeID: string;
    ContentType: string;
    Created: Date;
    CreatedBy: MyApp.DataService.UserInformationListItem;
    CreatedById: number;
    Modified: Date;
    ModifiedBy: MyApp.DataService.UserInformationListItem;
    ModifiedById: number;
    CopySource: string;
    ApprovalStatus: string;
    Path: string;
    CheckedOutTo: MyApp.DataService.UserInformationListItem;
    CheckedOutToId: number;
    Name: string;
    VirusStatus: string;
    IsCurrentVersion: bool;
    Owshiddenversion: number;
    Version: string;
    Description: string;
    CompatibleUIVersionS: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue[];
    DefaultCSSFile: string;
    Hidden: bool;
    TargetControlType: MyApp.DataService.MasterPageGalleryTargetControlTypeValue;
    TargetControlTypeValue: string;
    Icon: string;
    Standalone: MyApp.DataService.MasterPageGalleryStandaloneValue;
    StandaloneValue: string;
    TargetScope: string;
    TargetListTemplateID: string;
    
  }

  export interface MasterPageGalleryItemQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.MasterPageGalleryItem) => bool): MyApp.DataService.MasterPageGalleryItemQueryable;
    filter(predicate:(it: MyApp.DataService.MasterPageGalleryItem) => bool, thisArg: any): MyApp.DataService.MasterPageGalleryItemQueryable;

    map(projection: (it: MyApp.DataService.MasterPageGalleryItem) => any): MyApp.DataService.MasterPageGalleryItemQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.MasterPageGalleryItem) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.MasterPageGalleryItem[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.MasterPageGalleryItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.MasterPageGalleryItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.MasterPageGalleryItem) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.MasterPageGalleryItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.MasterPageGalleryItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.MasterPageGalleryItemQueryable;
    skip(amout: number): MyApp.DataService.MasterPageGalleryItemQueryable;

    order(selector: string): MyApp.DataService.MasterPageGalleryItemQueryable;
    orderBy(predicate: (it: MyApp.DataService.MasterPageGalleryItem) => any): MyApp.DataService.MasterPageGalleryItemQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.MasterPageGalleryItem) => any): MyApp.DataService.MasterPageGalleryItemQueryable;
    
    first(predicate: (it: MyApp.DataService.MasterPageGalleryItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.MasterPageGalleryItem) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.MasterPageGalleryItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.MasterPageGalleryItem[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.MasterPageGalleryItemQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface MasterPageGalleryItemSet extends MasterPageGalleryItemQueryable {
    add(initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; Modified?: Date; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; CopySource?: string; ApprovalStatus?: string; Path?: string; CheckedOutTo?: MyApp.DataService.UserInformationListItem; CheckedOutToId?: number; Name?: string; VirusStatus?: string; IsCurrentVersion?: bool; Owshiddenversion?: number; Version?: string; Description?: string; CompatibleUIVersionS?: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue[]; DefaultCSSFile?: string; Hidden?: bool; TargetControlType?: MyApp.DataService.MasterPageGalleryTargetControlTypeValue; TargetControlTypeValue?: string; Icon?: string; Standalone?: MyApp.DataService.MasterPageGalleryStandaloneValue; StandaloneValue?: string; TargetScope?: string; TargetListTemplateID?: string; }): MyApp.DataService.MasterPageGalleryItem;
    add(item: MyApp.DataService.MasterPageGalleryItem): MyApp.DataService.MasterPageGalleryItem;

    attach(item: MyApp.DataService.MasterPageGalleryItem): void;
    attach(item: { Id: number; }): void;
    attachOrGet(item: MyApp.DataService.MasterPageGalleryItem): MyApp.DataService.MasterPageGalleryItem;
    attachOrGet(item: { Id: number; }): MyApp.DataService.MasterPageGalleryItem;

    detach(item: MyApp.DataService.MasterPageGalleryItem): void;
    detach(item: { Id: number; }): void;

    remove(item: MyApp.DataService.MasterPageGalleryItem): void;
    remove(item: { Id: number; }): void;
    
    elementType: new (initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; Modified?: Date; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; CopySource?: string; ApprovalStatus?: string; Path?: string; CheckedOutTo?: MyApp.DataService.UserInformationListItem; CheckedOutToId?: number; Name?: string; VirusStatus?: string; IsCurrentVersion?: bool; Owshiddenversion?: number; Version?: string; Description?: string; CompatibleUIVersionS?: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue[]; DefaultCSSFile?: string; Hidden?: bool; TargetControlType?: MyApp.DataService.MasterPageGalleryTargetControlTypeValue; TargetControlTypeValue?: string; Icon?: string; Standalone?: MyApp.DataService.MasterPageGalleryStandaloneValue; StandaloneValue?: string; TargetScope?: string; TargetListTemplateID?: string; }) => MyApp.DataService.MasterPageGalleryItem;
  }

  class MasterPageGalleryCompatibleUIVersionSValue extends $data.Entity {
    constructor ();
    constructor (initData: { Value?: string; });
    Value: string;
    
  }

  export interface MasterPageGalleryCompatibleUIVersionSValueQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue) => bool): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;
    filter(predicate:(it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue) => bool, thisArg: any): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;

    map(projection: (it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue) => any): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;
    skip(amout: number): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;

    order(selector: string): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;
    orderBy(predicate: (it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue) => any): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue) => any): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;
    
    first(predicate: (it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface MasterPageGalleryCompatibleUIVersionSValueSet extends MasterPageGalleryCompatibleUIVersionSValueQueryable {
    add(initData: { Value?: string; }): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue;
    add(item: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue;

    attach(item: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue): void;
    attach(item: { Value: string; }): void;
    attachOrGet(item: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue;
    attachOrGet(item: { Value: string; }): MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue;

    detach(item: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue): void;
    detach(item: { Value: string; }): void;

    remove(item: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue): void;
    remove(item: { Value: string; }): void;
    
    elementType: new (initData: { Value?: string; }) => MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValue;
  }

  class MasterPageGalleryStandaloneValue extends $data.Entity {
    constructor ();
    constructor (initData: { Value?: string; });
    Value: string;
    
  }

  export interface MasterPageGalleryStandaloneValueQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.MasterPageGalleryStandaloneValue) => bool): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;
    filter(predicate:(it: MyApp.DataService.MasterPageGalleryStandaloneValue) => bool, thisArg: any): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;

    map(projection: (it: MyApp.DataService.MasterPageGalleryStandaloneValue) => any): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.MasterPageGalleryStandaloneValue) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.MasterPageGalleryStandaloneValue[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.MasterPageGalleryStandaloneValue[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.MasterPageGalleryStandaloneValue, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.MasterPageGalleryStandaloneValue) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.MasterPageGalleryStandaloneValue, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.MasterPageGalleryStandaloneValue[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;
    skip(amout: number): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;

    order(selector: string): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;
    orderBy(predicate: (it: MyApp.DataService.MasterPageGalleryStandaloneValue) => any): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.MasterPageGalleryStandaloneValue) => any): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;
    
    first(predicate: (it: MyApp.DataService.MasterPageGalleryStandaloneValue, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.MasterPageGalleryStandaloneValue) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.MasterPageGalleryStandaloneValue, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.MasterPageGalleryStandaloneValue[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.MasterPageGalleryStandaloneValueQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface MasterPageGalleryStandaloneValueSet extends MasterPageGalleryStandaloneValueQueryable {
    add(initData: { Value?: string; }): MyApp.DataService.MasterPageGalleryStandaloneValue;
    add(item: MyApp.DataService.MasterPageGalleryStandaloneValue): MyApp.DataService.MasterPageGalleryStandaloneValue;

    attach(item: MyApp.DataService.MasterPageGalleryStandaloneValue): void;
    attach(item: { Value: string; }): void;
    attachOrGet(item: MyApp.DataService.MasterPageGalleryStandaloneValue): MyApp.DataService.MasterPageGalleryStandaloneValue;
    attachOrGet(item: { Value: string; }): MyApp.DataService.MasterPageGalleryStandaloneValue;

    detach(item: MyApp.DataService.MasterPageGalleryStandaloneValue): void;
    detach(item: { Value: string; }): void;

    remove(item: MyApp.DataService.MasterPageGalleryStandaloneValue): void;
    remove(item: { Value: string; }): void;
    
    elementType: new (initData: { Value?: string; }) => MyApp.DataService.MasterPageGalleryStandaloneValue;
  }

  class MasterPageGalleryTargetControlTypeValue extends $data.Entity {
    constructor ();
    constructor (initData: { Value?: string; });
    Value: string;
    
  }

  export interface MasterPageGalleryTargetControlTypeValueQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue) => bool): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;
    filter(predicate:(it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue) => bool, thisArg: any): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;

    map(projection: (it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue) => any): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.MasterPageGalleryTargetControlTypeValue[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.MasterPageGalleryTargetControlTypeValue[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.MasterPageGalleryTargetControlTypeValue) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.MasterPageGalleryTargetControlTypeValue[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;
    skip(amout: number): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;

    order(selector: string): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;
    orderBy(predicate: (it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue) => any): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue) => any): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;
    
    first(predicate: (it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.MasterPageGalleryTargetControlTypeValue) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.MasterPageGalleryTargetControlTypeValue, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.MasterPageGalleryTargetControlTypeValue[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.MasterPageGalleryTargetControlTypeValueQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface MasterPageGalleryTargetControlTypeValueSet extends MasterPageGalleryTargetControlTypeValueQueryable {
    add(initData: { Value?: string; }): MyApp.DataService.MasterPageGalleryTargetControlTypeValue;
    add(item: MyApp.DataService.MasterPageGalleryTargetControlTypeValue): MyApp.DataService.MasterPageGalleryTargetControlTypeValue;

    attach(item: MyApp.DataService.MasterPageGalleryTargetControlTypeValue): void;
    attach(item: { Value: string; }): void;
    attachOrGet(item: MyApp.DataService.MasterPageGalleryTargetControlTypeValue): MyApp.DataService.MasterPageGalleryTargetControlTypeValue;
    attachOrGet(item: { Value: string; }): MyApp.DataService.MasterPageGalleryTargetControlTypeValue;

    detach(item: MyApp.DataService.MasterPageGalleryTargetControlTypeValue): void;
    detach(item: { Value: string; }): void;

    remove(item: MyApp.DataService.MasterPageGalleryTargetControlTypeValue): void;
    remove(item: { Value: string; }): void;
    
    elementType: new (initData: { Value?: string; }) => MyApp.DataService.MasterPageGalleryTargetControlTypeValue;
  }

  class ProjectsItem extends $data.Entity {
    constructor ();
    constructor (initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Title?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; });
    Id: number;
    ContentTypeID: string;
    ContentType: string;
    Title: string;
    Modified: Date;
    Created: Date;
    CreatedBy: MyApp.DataService.UserInformationListItem;
    CreatedById: number;
    ModifiedBy: MyApp.DataService.UserInformationListItem;
    ModifiedById: number;
    Owshiddenversion: number;
    Version: string;
    Attachments: MyApp.DataService.AttachmentsItem[];
    Path: string;
    
  }

  export interface ProjectsItemQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.ProjectsItem) => bool): MyApp.DataService.ProjectsItemQueryable;
    filter(predicate:(it: MyApp.DataService.ProjectsItem) => bool, thisArg: any): MyApp.DataService.ProjectsItemQueryable;

    map(projection: (it: MyApp.DataService.ProjectsItem) => any): MyApp.DataService.ProjectsItemQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.ProjectsItem) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.ProjectsItem[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.ProjectsItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.ProjectsItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.ProjectsItem) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.ProjectsItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.ProjectsItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.ProjectsItemQueryable;
    skip(amout: number): MyApp.DataService.ProjectsItemQueryable;

    order(selector: string): MyApp.DataService.ProjectsItemQueryable;
    orderBy(predicate: (it: MyApp.DataService.ProjectsItem) => any): MyApp.DataService.ProjectsItemQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.ProjectsItem) => any): MyApp.DataService.ProjectsItemQueryable;
    
    first(predicate: (it: MyApp.DataService.ProjectsItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.ProjectsItem) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.ProjectsItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.ProjectsItem[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.ProjectsItemQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface ProjectsItemSet extends ProjectsItemQueryable {
    add(initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Title?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; }): MyApp.DataService.ProjectsItem;
    add(item: MyApp.DataService.ProjectsItem): MyApp.DataService.ProjectsItem;

    attach(item: MyApp.DataService.ProjectsItem): void;
    attach(item: { Id: number; }): void;
    attachOrGet(item: MyApp.DataService.ProjectsItem): MyApp.DataService.ProjectsItem;
    attachOrGet(item: { Id: number; }): MyApp.DataService.ProjectsItem;

    detach(item: MyApp.DataService.ProjectsItem): void;
    detach(item: { Id: number; }): void;

    remove(item: MyApp.DataService.ProjectsItem): void;
    remove(item: { Id: number; }): void;
    
    elementType: new (initData: { Id?: number; ContentTypeID?: string; ContentType?: string; Title?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; }) => MyApp.DataService.ProjectsItem;
  }

  class TimeTrackingListItem extends $data.Entity {
    constructor ();
    constructor (initData: { ContentTypeID?: string; Title?: string; Employee?: MyApp.DataService.UserInformationListItem; EmployeeId?: number; ProjectTask?: MyApp.DataService.ProjectsItem; ProjectTaskId?: number; DurationHours?: number; Date?: Date; Id?: number; ContentType?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; });
    ContentTypeID: string;
    Title: string;
    Employee: MyApp.DataService.UserInformationListItem;
    EmployeeId: number;
    ProjectTask: MyApp.DataService.ProjectsItem;
    ProjectTaskId: number;
    DurationHours: number;
    Date: Date;
    Id: number;
    ContentType: string;
    Modified: Date;
    Created: Date;
    CreatedBy: MyApp.DataService.UserInformationListItem;
    CreatedById: number;
    ModifiedBy: MyApp.DataService.UserInformationListItem;
    ModifiedById: number;
    Owshiddenversion: number;
    Version: string;
    Attachments: MyApp.DataService.AttachmentsItem[];
    Path: string;
    
  }

  export interface TimeTrackingListItemQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.TimeTrackingListItem) => bool): MyApp.DataService.TimeTrackingListItemQueryable;
    filter(predicate:(it: MyApp.DataService.TimeTrackingListItem) => bool, thisArg: any): MyApp.DataService.TimeTrackingListItemQueryable;

    map(projection: (it: MyApp.DataService.TimeTrackingListItem) => any): MyApp.DataService.TimeTrackingListItemQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.TimeTrackingListItem) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.TimeTrackingListItem[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.TimeTrackingListItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.TimeTrackingListItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.TimeTrackingListItem) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.TimeTrackingListItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.TimeTrackingListItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.TimeTrackingListItemQueryable;
    skip(amout: number): MyApp.DataService.TimeTrackingListItemQueryable;

    order(selector: string): MyApp.DataService.TimeTrackingListItemQueryable;
    orderBy(predicate: (it: MyApp.DataService.TimeTrackingListItem) => any): MyApp.DataService.TimeTrackingListItemQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.TimeTrackingListItem) => any): MyApp.DataService.TimeTrackingListItemQueryable;
    
    first(predicate: (it: MyApp.DataService.TimeTrackingListItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.TimeTrackingListItem) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.TimeTrackingListItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.TimeTrackingListItem[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.TimeTrackingListItemQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface TimeTrackingListItemSet extends TimeTrackingListItemQueryable {
    add(initData: { ContentTypeID?: string; Title?: string; Employee?: MyApp.DataService.UserInformationListItem; EmployeeId?: number; ProjectTask?: MyApp.DataService.ProjectsItem; ProjectTaskId?: number; DurationHours?: number; Date?: Date; Id?: number; ContentType?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; }): MyApp.DataService.TimeTrackingListItem;
    add(item: MyApp.DataService.TimeTrackingListItem): MyApp.DataService.TimeTrackingListItem;

    attach(item: MyApp.DataService.TimeTrackingListItem): void;
    attach(item: { Id: number; }): void;
    attachOrGet(item: MyApp.DataService.TimeTrackingListItem): MyApp.DataService.TimeTrackingListItem;
    attachOrGet(item: { Id: number; }): MyApp.DataService.TimeTrackingListItem;

    detach(item: MyApp.DataService.TimeTrackingListItem): void;
    detach(item: { Id: number; }): void;

    remove(item: MyApp.DataService.TimeTrackingListItem): void;
    remove(item: { Id: number; }): void;
    
    elementType: new (initData: { ContentTypeID?: string; Title?: string; Employee?: MyApp.DataService.UserInformationListItem; EmployeeId?: number; ProjectTask?: MyApp.DataService.ProjectsItem; ProjectTaskId?: number; DurationHours?: number; Date?: Date; Id?: number; ContentType?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; }) => MyApp.DataService.TimeTrackingListItem;
  }

  class UserInformationListItem extends $data.Entity {
    constructor ();
    constructor (initData: { ContentTypeID?: string; Name?: string; Account?: string; WorkEmail?: string; MobilePhone?: string; AboutMe?: string; SIPAddress?: string; IsSiteAdmin?: bool; Deleted?: bool; Hidden?: bool; Picture?: string; Department?: string; Title?: string; FirstName?: string; LastName?: string; WorkPhone?: string; UserName?: string; WebSite?: string; AskMeAbout?: string; Office?: string; Id?: number; ContentType?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; });
    ContentTypeID: string;
    Name: string;
    Account: string;
    WorkEmail: string;
    MobilePhone: string;
    AboutMe: string;
    SIPAddress: string;
    IsSiteAdmin: bool;
    Deleted: bool;
    Hidden: bool;
    Picture: string;
    Department: string;
    Title: string;
    FirstName: string;
    LastName: string;
    WorkPhone: string;
    UserName: string;
    WebSite: string;
    AskMeAbout: string;
    Office: string;
    Id: number;
    ContentType: string;
    Modified: Date;
    Created: Date;
    CreatedBy: MyApp.DataService.UserInformationListItem;
    CreatedById: number;
    ModifiedBy: MyApp.DataService.UserInformationListItem;
    ModifiedById: number;
    Owshiddenversion: number;
    Version: string;
    Attachments: MyApp.DataService.AttachmentsItem[];
    Path: string;
    
  }

  export interface UserInformationListItemQueryable extends $data.Queryable {
    filter(predicate:(it: MyApp.DataService.UserInformationListItem) => bool): MyApp.DataService.UserInformationListItemQueryable;
    filter(predicate:(it: MyApp.DataService.UserInformationListItem) => bool, thisArg: any): MyApp.DataService.UserInformationListItemQueryable;

    map(projection: (it: MyApp.DataService.UserInformationListItem) => any): MyApp.DataService.UserInformationListItemQueryable;

    length(): $data.IPromise;
    length(handler: (result: number) => void): $data.IPromise;
    length(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;

    forEach(handler: (it: MyApp.DataService.UserInformationListItem) => void ): $data.IPromise;
    
    toArray(): $data.IPromise;
    toArray(handler: (result: MyApp.DataService.UserInformationListItem[]) => void): $data.IPromise;
    toArray(handler: { success?: (result: MyApp.DataService.UserInformationListItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    single(predicate: (it: MyApp.DataService.UserInformationListItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.UserInformationListItem) => void): $data.IPromise;
    single(predicate: (it: MyApp.DataService.UserInformationListItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.UserInformationListItem[]) => void; error?: (result: any) => void; }): $data.IPromise;

    take(amout: number): MyApp.DataService.UserInformationListItemQueryable;
    skip(amout: number): MyApp.DataService.UserInformationListItemQueryable;

    order(selector: string): MyApp.DataService.UserInformationListItemQueryable;
    orderBy(predicate: (it: MyApp.DataService.UserInformationListItem) => any): MyApp.DataService.UserInformationListItemQueryable;
    orderByDescending(predicate: (it: MyApp.DataService.UserInformationListItem) => any): MyApp.DataService.UserInformationListItemQueryable;
    
    first(predicate: (it: MyApp.DataService.UserInformationListItem, params?: any) => bool, params?: any, handler?: (result: MyApp.DataService.UserInformationListItem) => void): $data.IPromise;
    first(predicate: (it: MyApp.DataService.UserInformationListItem, params?: any) => bool, params?: any, handler?: { success?: (result: MyApp.DataService.UserInformationListItem[]) => void; error?: (result: any) => void; }): $data.IPromise;
    
    include(selector: string): MyApp.DataService.UserInformationListItemQueryable;

    removeAll(): $data.IPromise;
    removeAll(handler: (count: number) => void): $data.IPromise;
    removeAll(handler: { success?: (result: number) => void; error?: (result: any) => void; }): $data.IPromise;
  }


  export interface UserInformationListItemSet extends UserInformationListItemQueryable {
    add(initData: { ContentTypeID?: string; Name?: string; Account?: string; WorkEmail?: string; MobilePhone?: string; AboutMe?: string; SIPAddress?: string; IsSiteAdmin?: bool; Deleted?: bool; Hidden?: bool; Picture?: string; Department?: string; Title?: string; FirstName?: string; LastName?: string; WorkPhone?: string; UserName?: string; WebSite?: string; AskMeAbout?: string; Office?: string; Id?: number; ContentType?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; }): MyApp.DataService.UserInformationListItem;
    add(item: MyApp.DataService.UserInformationListItem): MyApp.DataService.UserInformationListItem;

    attach(item: MyApp.DataService.UserInformationListItem): void;
    attach(item: { Id: number; }): void;
    attachOrGet(item: MyApp.DataService.UserInformationListItem): MyApp.DataService.UserInformationListItem;
    attachOrGet(item: { Id: number; }): MyApp.DataService.UserInformationListItem;

    detach(item: MyApp.DataService.UserInformationListItem): void;
    detach(item: { Id: number; }): void;

    remove(item: MyApp.DataService.UserInformationListItem): void;
    remove(item: { Id: number; }): void;
    
    elementType: new (initData: { ContentTypeID?: string; Name?: string; Account?: string; WorkEmail?: string; MobilePhone?: string; AboutMe?: string; SIPAddress?: string; IsSiteAdmin?: bool; Deleted?: bool; Hidden?: bool; Picture?: string; Department?: string; Title?: string; FirstName?: string; LastName?: string; WorkPhone?: string; UserName?: string; WebSite?: string; AskMeAbout?: string; Office?: string; Id?: number; ContentType?: string; Modified?: Date; Created?: Date; CreatedBy?: MyApp.DataService.UserInformationListItem; CreatedById?: number; ModifiedBy?: MyApp.DataService.UserInformationListItem; ModifiedById?: number; Owshiddenversion?: number; Version?: string; Attachments?: MyApp.DataService.AttachmentsItem[]; Path?: string; }) => MyApp.DataService.UserInformationListItem;
  }

  export class Context extends $data.EntityContext {
    onReady(handler: (context: Context) => void): $data.IPromise;
    Attachments: MyApp.DataService.AttachmentsItemSet;
    ComposedLooks: MyApp.DataService.ComposedLooksItemSet;
    MasterPageGallery: MyApp.DataService.MasterPageGalleryItemSet;
    MasterPageGalleryCompatibleUIVersionS: MyApp.DataService.MasterPageGalleryCompatibleUIVersionSValueSet;
    MasterPageGalleryStandalone: MyApp.DataService.MasterPageGalleryStandaloneValueSet;
    MasterPageGalleryTargetControlType: MyApp.DataService.MasterPageGalleryTargetControlTypeValueSet;
    Projects: MyApp.DataService.ProjectsItemSet;
    TimeTrackingList: MyApp.DataService.TimeTrackingListItemSet;
    UserInformationList: MyApp.DataService.UserInformationListItemSet;
    ConvertListTitleToEntitySetName: (listTitle: string, handler?: (result: string) => void) => $data.IPromise;
    
  }

}

